---
title: "02_clean_with_functions.qmd"
format: html
editor: visual
author: "Anna Boateng: s175562, Marlies Goedknegt: s220675, Anne Gjelstrup: s194530, Katja Jagd: s185395, Olivia Ronnenberg: s183359"
---

## Part 02: clean

#### Accessing relevant functions

```{r}
source("99_proj_func.R")
```

#### Import libraries

```{r}
#| label: load packages
#| message: false
library("tidyverse")
```

#### Read in the loaded data files

```{r}
#| label: load in data

coexpression_clean <- read_tsv("../data/01_coexpression_load.tsv.gz",
                               show_col_types = FALSE)

regulators_before_clean <- read_tsv("../data/01_regulators_before_load.tsv.gz",
                                    show_col_types = FALSE, skip = 1)

regulators_after_clean <- read_tsv("../data/01_regulators_after_load.tsv.gz",
                                   show_col_types = FALSE, skip = 1)
```

#### Cleaning of co-expression data

As stated before, data table 1 contains data on 20 co-expression modules. In the code below, the table is tidied, so that each column represents a single module, and the row lists all genes within that given module.

```{r}

#| label: Cleaning data table 1
coexpression_clean <- coexpression_clean |>
  mutate(genenr = str_c("gene_",
                        row_number()),
         .before = "Module 1") |>
  pivot_longer(cols = -genenr,
               names_to = "modules",
               values_to = "gene") |>
  pivot_wider(names_from = genenr,
              values_from = gene)

```

#### Cleaning the two data frames describing upstream regulators before and after treatment

Function that fixes renames headers and ensures all floats in the data frame is interpreted as numeric values and selects relevant columns for further analysis

```{r}
#| label: Fixing names and values
regulators_before_clean <- fix_headers_and_values(regulators_before_clean,
                                              " before") 
regulators_after_clean <- fix_headers_and_values(regulators_after_clean,
                                              " after") 

```

Function that filters p-values over 0.05 and expression level between -0.15 and 0.15

```{r}
#| label: Select significant observations
regulators_before_clean <- filter_significant_observations(regulators_before_clean,
                                                           p_value_of_overlap_before,
                                                           expr_log_ratio_before)

regulators_after_clean <- filter_significant_observations(regulators_after_clean,
                                                           p_value_of_overlap_after,
                                                           expr_log_ratio_after)
```

Functions that collects and joins selected parts of two dataframe

```{r}
#| label: Joining and splitting the two dataframes 
target_data <- all_target_data(regulators_before_clean, regulators_after_clean)
expr_data <- all_expression_data(regulators_before_clean, regulators_after_clean)
```

Function that splits many values in one cell into separate cells

```{r}
#| label: Seperating crowded cells
#| message: false
#| warning: false
target_data <- split_cells(target_data, target_molecules_in_dataset_before, "before")
target_data <- split_cells(target_data, target_molecules_in_dataset_after, "after")
```

Saving the cleaned data frames as zipped tsv files

```{r}
write_tsv(coexpression_clean,
          "../data/02_coexpression_clean.tsv.gz")

write_tsv(expr_data,
          "../data/02_expr_clean.tsv.gz")

write_tsv(target_data,
          "../data/02_target_clean.tsv.gz")
```
