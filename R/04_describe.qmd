---
title: "Part 04: Describe.qmd"
format: html
editor: visual
author: "Anna Boateng: s175562, Marlies Goedknegt: s220675, Anne Gjelstrup: s194530, Katja Jagd: s185395, Olivia Ronnenberg: s183359"
---

The fourth part of the project is to describe the augmented data.

### Import the required packages

As previously "tidyverse" is required along with three other packages ("ggthemes", "patchwork", and "gridExtra") not part of the "tidyverse" package.

```{r}
#| label: load packages
#| message: false

library("tidyverse")
library("ggthemes")
library("patchwork")
library("gridExtra")

```

### Load in augmented data files

```{r}
#| label: load data

expr_before_aug <- read_tsv("../data/03_expr_before_aug.tsv.gz",
                            show_col_types = FALSE)

expr_after_aug <- read_tsv("../data/03_expr_after_aug.tsv.gz",
                           show_col_types = FALSE)

expr_intersect_aug <- read_tsv("../data/03_expr_intersect_aug.tsv.gz",
                               show_col_types = FALSE)

target_intersect_aug <- read_tsv("../data/03_target_intersect_aug.tsv.gz",
                                 show_col_types = FALSE)

coexpression_aug <- read_tsv("../data/03_coexpression_aug.tsv.gz",
                             show_col_types = FALSE)
```

### Description of the data tables

After cleaning and augmenting the data, five data frames will be present:

1.  A table containing the regulator molecules and their respective expression levels before treatment called "03_expr_before_aug". Containing the following variables:
    -   upstream_regulator
    -   expr_log_ratio_before
    -   p_value_before
    -   -log10_p_value
    -   is_significant
2.  A table containing the regulator molecules and their respective expression levels after treatment called "03_expr_after_aug". Containing the follow variables:
    -   upstream_regulator
    -   expr_log_ratio_after
    -   p_value_after
    -   -log10_p_after
    -   is_significant
3.  A table containing twenty co-expression modules and the target molecules each contains, called "03_coexpression_aug". Containing the following variables:
    -   modules
    -   target_molecule
4.  A table containing the regulator molecules, shared between before and after treatment, along with their related target molecules, called "03_target_intersect_aug". Containing the following variables:
    -   upstream_regulator
    -   n_target_before
    -   n_target_after
    -   mol_change
    -   change_class
    -   target_molecule_before_1 to target_molecule_before_198
    -   target_molecule_after_1 to target_molecule_after_215
5.  A table containing the regulator molecules, shared between before and after treatment along with their respective expression levels called "03_expr_intersect_aug". Containing the following variables:
    -   upstream_regulator
    -   molecule_type
    -   expr_log_ratio_before
    -   expr_log_ratio_after
    -   change_in_expr
    -   regulation
    -   p_value_before
    -   p_value_after

### Dimensions of the data

For each of the five data tables, the dimensions are listed below.

1.  Table "expr_before_aug": `r ncol(expr_before_aug)` variables and `r nrow(expr_before_aug)` observations.
2.  Table "expr_after_aug": `r ncol(expr_after_aug)` variables and `r nrow(expr_after_aug)` observations.
3.  Table "coexpression_aug": `r ncol(coexpression_aug)` variables and `r nrow(coexpression_aug)` observations.
4.  Table "target_intersect_aug": `r ncol(target_intersect_aug)` variables and `r nrow(target_intersect_aug)` observations.
5.  Table "expr_intersect_aug": `r ncol(expr_intersect_aug)` variables and `r nrow(expr_intersect_aug)` observations.

These can be analyzed using ncol() for variables and nrow() for observations. The dim() function can also be used to get both.

### Pie chart of molecule types

The upstream regulators are different types of molecules, e.g., cytokine, enzyme etc. To depict the distribution of different molecule types, a pie chart is shown below.

```{r}
#| label: Pie chart 2
#| warning: false 

# Calculating the count of target molecules for each molecule type
molecule_counts <- expr_intersect_aug |>
  group_by(molecule_type) |>
  summarize(count = n())


# Making the chart 
pie_chart <- ggplot(molecule_counts,
                    aes(x = "", y = count, fill = molecule_type)) +
  geom_col(color = "white") +
  geom_label(aes(x = 1.35,
                 label = count),
            position = position_stack(vjust = 0.5), 
            color = "white",
            size = 4,
            show.legend = FALSE) +
  coord_polar(theta = "y",
              start = 0) +
  labs(
    x = NULL, 
    y = NULL,
    title = "Distribution of regulator molecule types ",
    fill = "Molecule Type") +
  scale_color_colorblind() +
  theme_void() +
  theme(legend.key.size = unit(0.95, "lines"),
        legend.spacing.y = unit(0.3, "lines")
        )

pie_chart

#Saving
ggsave(filename = "04_pie_chart.png",
       plot = last_plot(),
       device = "png",
       path = "../results", 
       scale = 1,
       limitsize = TRUE)
```

### Box plot of regulator expression levels

The indicate the difference in the expression levels of regulator molecules before and after treatment, a box plot can be created with the code below.

```{r}
#| label: box plot of expression levels 
#| warning: false 

boxplot_before <- expr_before_aug |> 
  ggplot(aes(y = expr_log_ratio_before)) +
  geom_boxplot(show.legend = FALSE,
               fill = "#F8766D",
               color = "#D6464A",
               alpha = 0.7) +
  labs(y = "Expression log ratio",
       title = "Regulator expression levels before and after treatment",
       subtitle = "Before treatment") +
  theme(plot.subtitle = element_text(hjust=0.5),
        panel.background = element_rect(fill = "transparent"),
        plot.backgroun = element_rect(fill = "transparent"),
        panel.grid = element_line(color = "#D3D3D3", size = 0.2)) +
  scale_y_continuous(limits = c(-5,5)) +
  scale_x_continuous(limits = c(-1,1))

boxplot_after <- expr_after_aug |> 
  ggplot(aes(y = expr_log_ratio_after)) +
  geom_boxplot(show.legend = FALSE,
               fill = "#00BFC4",
               color = "#009B9F",
               alpha = 0.7) +
  labs(y = "",
       subtitle = "After treatment") +
  theme(plot.subtitle = element_text(hjust=0.5),
        panel.background = element_rect(fill = "transparent"),
        plot.backgroun = element_rect(fill = "transparent"),
        panel.grid = element_line(color = "#D3D3D3", size = 0.2)) +
  scale_y_continuous(limits = c(-5,5)) +
  scale_x_continuous(limits = c(-1,1))

boxplot_expr <- boxplot_before + boxplot_after +
  plot_annotation(theme = theme(plot.background = NULL))

boxplot_expr

ggsave(filename = "04_box_plot.png",
       plot = last_plot(),
       device = "png",
       path = "../results",
       scale = 1,
       limitsize = TRUE,
       bg = "transparent")

```
